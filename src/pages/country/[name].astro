---
import Link from '../../components/Link.astro';
import Layout from '../../layouts/Layout.astro';
import type { CardData } from '../../pages/api/data.json';

const { protocol, hostname, port } = Astro.url;

export async function getStaticPaths() {
  const response = await fetch(
    `${protocol}//${hostname}:${port}/api/data.json`,
  );
  const data = await response.json();

  const routes = data.map((e: CardData) => {
    return { params: { name: e.name } };
  });

  return routes;
}

const { name } = Astro.params;

const response = await fetch(`${protocol}//${hostname}:${port}/api/data.json`);
const data: CardData[] = await response.json();
const details = data.find(e => e.name === name);
---

<Layout title={`What about ${name}?`}>
  <Link
    class="ml-7 pl-[3.2rem] mt-10 w-[6.5rem] lg:ml-[5rem] lg:w-[8.5rem] lg:pl-[3.7rem] lg:text-lg lg:mt-[4.9rem] lg:h-[2.8rem]"
    href="/"
  >
    <svg
      class="absolute left-[1.3rem] top-[0.3rem] lg:left-[1.7rem] lg:top-[0.5rem]"
      xmlns="http://www.w3.org/2000/svg"
      width="1.5em"
      height="1.5em"
      viewBox="0 0 24 24"
      ><path
        fill="currentColor"
        d="M21 11H6.83l3.58-3.59L9 6l-6 6l6 6l1.41-1.41L6.83 13H21v-2z"
      ></path></svg
    >Back
  </Link>
  <div class="place-self-center flex flex-col lg:flex-row lg:gap-[5.9rem]">
    <img
      class="h-[14.3rem] place-self-center lg:place-self-start mt-16 lg:h-auto drop-shadow-lg lg:w-[35rem] lg:mt-[5rem]"
      src={details?.flag}
      alt={`${details?.name} Flag`}
    />
    <div
      class="flex flex-col mb-14 mx-[1.7rem] dark:text-white lg:row-start-2 lg:max-w-[35.6rem]"
    >
      <h1 class="mt-11 text-xl font-bold lg:mt-[7.4rem] lg:text-4xl">
        {details?.name}
      </h1>
      <div
        class="lg:flex lg:mt-[1.6rem] lg:gap-[10.7rem] lg:text-lg [&>div>p]:text-[0.915rem] [&>div>p>span]:font-normal [&>div>p]:font-semibold [&>div>p]:mt-[0.65rem] [&>div>p]:lg:mt-[0.25rem]"
      >
        <div class="mt-[1.45rem] lg:mt-0">
          <p>Native Name: <span>{details?.nativeName}</span></p>
          <p>
            Population: <span
              >{details?.population.toLocaleString().replaceAll('.', ',')}</span
            >
          </p>
          <p>Region: <span>{details?.region}</span></p>
          <p>
            Sub Region: <span>{details?.subRegion}</span>
          </p>
          <p>Capital: <span>{details?.capital}</span></p>
        </div>
        <div class="mt-[2.5rem] lg:mt-0">
          <p>
            Top Level Domain: <span>{details?.topLevelDomain}</span>
          </p>
          <p>
            Currencies: <span>{details?.currencies?.join(', ')}</span>
          </p>
          <p>
            Languages: <span>{details?.languages.join(', ')}</span>
          </p>
        </div>
      </div>
      {
        details?.borderCountries ? (
          <div class="lg:flex lg:items-start lg:mt-[4.2rem]">
            <h2 class="mt-[2.35rem] font-semibold lg:w-[10rem] lg:mt-1">
              Border Countries:
            </h2>
            <div class="flex flex-wrap gap-2 lg:w-[25rem]">
              {details?.borderCountries?.map(country => (
                <Link
                  href={`/country/${country}`}
                  class="mt-4 min-w-[6.1rem] px-4 text-center lg:mt-0 lg:mb-2"
                >
                  {country.match(/^([^(]+)/)?.[0] ?? country}
                </Link>
              ))}
            </div>
          </div>
        ) : null
      }
    </div>
  </div>
</Layout>
