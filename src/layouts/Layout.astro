---
import NavBar from '../components/NavBar.astro';
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;600;800&display=swap"
      rel="stylesheet"
    />

    <meta name="generator" content={Astro.generator} />
    <meta name="view-transition" content="same-origin" />
    <title>Frontend Mentor | {title}</title>
  </head>
  <body
    class="flex flex-col min-h-screen bg-bg-very-light-gray dark:bg-bg-very-dark-blue"
  >
    <NavBar title={title} />
    <main
      class="grid bg-bg-very-light-gray text-text-very-dark-blue dark:bg-bg-very-dark-blue"
    >
      <slot />
    </main>
  </body>
</html>

<script is:inline>
  const html = document.querySelector('html');
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    html?.classList.remove('dark');
  } else {
    html?.classList.add('dark');
  }

  if (document.startViewTransition) {
    window.navigation.addEventListener('navigate', event => {
      const toUrl = new URL(event.destination.url);

      // we ignore if it is an external page
      if (location.origin !== toUrl.origin) return;

      // if it is from the same domain (origin)
      event.intercept({
        async handler() {
          // loading the destiny page
          // then fetch to get the html
          const response = await fetch(toUrl.pathname);
          const text = await response.text();
          // keep only what is inside the body tag
          // using regex for get it
          const [, data] = text.match(/<body[^>]*>([\s\S]*)<\/body>/i);

          // utilize View Transition API
          document.startViewTransition(() => {
            // scroll to top
            document.body.innerHTML = data;
            document.documentElement.scrollTop = 0;
          });
        },
      });
    });
  }
</script>

<style is:global>
  html {
    font-family: 'Nunito Sans', system-ui, -apple-system, BlinkMacSystemFont,
      'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans',
      'Helvetica Neue', sans-serif sans-serif;
  }

  * {
    transition: background-color ease 0.2s;
  }

  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation-duration: 0.2s;
  }
</style>
